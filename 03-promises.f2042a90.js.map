{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGE,MAAIC,EAAUC,SAASC,cAAc,qBACjCC,EAASF,SAASC,cAAc,oBAChCE,EAAWH,SAASC,cAAc,sBAsBtCG,eAAaC,EAAUC,EAAQC,EAAMC,EAAMC,EAAU,GACrD,GAAIA,EAAUH,EAAQ,OAQnB,IACD,MAAMI,QA3BR,SAAqBC,EAAUC,EAAOJ,GACtC,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,uBAAqBH,QAAiBC,OAE5CG,EAAK,sBAAoBJ,QAAiBC,MAAU,GAEvDJ,EAAOI,EAAM,G,CAkBMO,CAAcV,EAASD,GAC7CY,EAAAvB,GAASwB,OAAOX,QAAQA,E,CACxB,MAAOY,GACPF,EAAAvB,GAASwB,OAAOE,QAAQD,E,CAe1BN,YAAW,IAAMX,EAAUC,EAAQC,EAAMC,EAAMC,EAAU,IADtCD,GAAQC,EAAU,GAAKF,E,CAhD1BP,SAASC,cAAc,uBAwD/BuB,iBAAiB,SAAS,SAAUC,GAC5CA,EAAMC,iBACN,MAAQC,MAAOrB,GAAWH,GAClBwB,MAAOpB,GAASL,GAChByB,MAAOf,GAAUb,EACzBiB,YAAW,IAAMX,GAAWC,GAASC,GAAOK,KAASA,E","sources":["src/js/03-promises.js"],"sourcesContent":["// importowanie biblioteki\nimport Notiflix from 'notiflix';\n\n// pobieram dostęp do inputów i buttona\nconst delayEl = document.querySelector('input[name=delay]');\nconst stepEl = document.querySelector('input[name=step]');\nconst amountEl = document.querySelector('input[name=amount]');\nconst submitBtn = document.querySelector('button[type=submit]');\n\n// funkcja createPromise zwraca nową obietnicę\n// dodanie time aby delay się przesuwał zgodnie z wytycznymi zadania\nfunction createPromise(position, delay, time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, time + delay);\n  });\n}\n\n// funkcja asynchroniczna myPromise- tworząca wiele obietnic dzięki createPromise\n// wykonana tyle razy ile podane w amount\n// step i time-określają różnicę czasową między kolejnymi obietnicami i czas, w którym zostanie utworzona pierwsza obietnica\n// domyślnie/current ustawione są na 1.\nasync function myPromise(amount, step, time, current = 1) {\n  if (current > amount) return;\n\n  // try...catch\n  // Najpierw wykonywany jest kod wewnątrz bloku try.\n  // Jeśli nie ma błędów, blok catch jest ignorowany, a interpreter idzie dalej.\n  // Jeśli w bloku try wystąpi błąd, jego wykonanie zostaje zatrzymane, a interpreter przejdzie do bloku catch.\n  // try-catch, obsługuje wynik każdej obietnicy\n  // wyświetla powiadomienia Notiflix w zależności od wyniku\n  try {\n    const success = await createPromise(current, time);\n    Notiflix.Notify.success(success);\n  } catch (error) {\n    Notiflix.Notify.failure(error);\n  }\n  // po każdej wykonanej obietnicy time zwiększa się o step\n  // funcja myPromise wywoływana jest rekurencyjnie/przez samą siebie\n  // ze zwiększoną wartością current, aż current przekroczy ammount\n\n  // to raczej do usunięcia\n  //   time += step;\n  //   setTimeout(() => myPromise(amount, step, time, current + 1), time);\n  // }\n\n  // zmienna, która przechowuje sumaryczny czas opóźnienia\n  // czas od rozpoczęcia działania funkcji myPromise\n  // dodanie wartości\" step\" aby kolejne obietnice były tworzone po upływie właściwej ilości czasu\n  const totalDelay = time + (current - 1) * step;\n  setTimeout(() => myPromise(amount, step, time, current + 1), totalDelay);\n}\n\n// wywołanie funkcji myPromise po kliknięciu submitBtn\n// funkcja myPromise wywoława z wartościami amount, step i delay jako parametrami\n// amount, step i delay-pobrane z formularza (zmienne na górze)\n// delay- opóźnienie czasowe przed rozpoczęciem wykonywanie myPromise\nsubmitBtn.addEventListener('click', function (event) {\n  event.preventDefault();\n  const { value: amount } = amountEl;\n  const { value: step } = stepEl;\n  const { value: delay } = delayEl;\n  setTimeout(() => myPromise(+amount, +step, +delay), +delay);\n  let time = +delay;\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$delayEl","document","querySelector","$47d4ff9957288465$var$stepEl","$47d4ff9957288465$var$amountEl","async","$47d4ff9957288465$var$myPromise","amount","step","time","current","success","position","delay","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$createPromise","$parcel$interopDefault","Notify","error","failure","addEventListener","event","preventDefault","value"],"version":3,"file":"03-promises.f2042a90.js.map"}